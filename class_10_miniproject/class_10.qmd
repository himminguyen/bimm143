---
title: "Class 10 Mini Project"
author: "Jimmi Nguyen"
format: html
---

# Exploratory Analysis of Halloween Candy

Get the data from the FiveThirtyEight GitHub repo

```{r}
candy_file <- "candy-data.csv"

candy = read.csv(candy_file, row.names=1)
head(candy)
```

>Q1. How many different candy types are in this dataset?

```{r}
colnames(candy)
ncol(candy[-1:-3])
```

>Q2. How many fruity candy types are in the dataset?

```{r}
sum(candy$fruity)
```

>Q3. What is your favorite candy in the dataset and what is it’s winpercent value?

```{r}
candy["Whopper", ]$winpercent
```

>Q4. What is the winpercent value for “Kit Kat”?

```{r}
candy["Kit Kat", ]$winpercent
```

>Q5. What is the winpercent value for “Tootsie Roll Snack Bars”?

```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent
```

Let’s install skimr package and try it on our candy data.

```{r}
library("skimr")
skim(candy)
```

>Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

From the `skim()` function, we find that only the winpercent variable appears to be on a different scale due to all of their values being above 1. All other variables have values between 0 and 1 within this function. 

>Q7. What do you think a zero and one represent for the candy$chocolate column?

A zero represent a false statement that the candy of the row *is not* of a chocolate type, while a one represent a true statement that the candy of the row *is* of the chocolate type.

## Exploratory analysis with a histogram

>Q8. Plot a histogram of winpercent values

```{r}
hist(candy$winpercent)
```

>Q9. Is the distribution of winpercent values symmetrical?

The distribution is not symmetrical. It appears to be slightly skewed left distribution.

>Q10. Is the center of the distribution above or below 50%?

The center of distribution is below 50%.

>Q11. On average is chocolate candy higher or lower ranked than fruit candy?

```{r}
#average chocolate candy win percent
choco.win = candy$winpercent[as.logical(candy$chocolate)]
mean(choco.win)


#average fruity candy win percent
fruit.win = candy$winpercent[as.logical(candy$fruity)]
mean(fruit.win)

```

Comparing the two values, chocolate candy is ranked higher than fruit candy.

>Q12. Is this difference statistically significant?

```{r}
t.test(choco.win, fruit.win)
```

The difference is stastically different because the t-test yielded a p-value of 2.871e-08

## Overall candy rankings

Using the dplyr package, we can sort the candies by winpercent with the `arrange()` function.

>Q13. What are the five least liked candy types in this set?

```{r}
library(dplyr)

candy %>% arrange(winpercent) %>% head(5)
```

>Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
library(dplyr)

candy %>% arrange(desc(winpercent)) %>% head(5)
```

Examine more of the data set in this vain we can make a barplot to visualize the overall rankings. Getting a rough starting plot and then refining and adding useful details

>Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
library(ggplot2)

ggplot(candy) + 
  aes(winpercent, rownames(candy)) +
  geom_col()
```

>Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col()
```

setup a color vector (that signifies candy type) that we can then use for some future plots

```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
```

try our barplot with these colors.

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col(fill=my_cols)
```

>Q17. What is the worst ranked chocolate candy?

The worst ranked chocolate candy is Sixlets.

>Q18. What is the best ranked fruity candy?

The best ranked fruity candy is Starburst.

## Taking a look at pricepercent
make a plot of winpercent vs the pricepercent variable

```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) + 
  geom_text_repel(col=my_cols, size=3.3, max.overlaps = 5)
```

>Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

Chocolate candys are the highest ranked in terms of winpercent for the least money

>Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
```
Top five are Nik L Nips, Nestle Smarties, Ring pop, Ring pop, Hershey's Krackel, and Hershey's Milk Chocolate. The least popular one was Nik L Nips.

>Q21. Make a barplot again with geom_col() this time using pricepercent and then improve this step by step, first ordering the x-axis by value and finally making a so called “dot chat” or “lollipop” chart by swapping geom_col() for geom_point() + geom_segment().

```{r}
# Make a lollipop chart of pricepercent
ggplot(candy) +
  aes(pricepercent, reorder(rownames(candy), pricepercent)) +
  geom_col(aes(yend = reorder(rownames(candy), pricepercent), 
                   xend = 0), col="gray40")
```

```{r}
# Make a lollipop chart of pricepercent
ggplot(candy) +
  aes(pricepercent, reorder(rownames(candy), pricepercent)) +
  geom_segment(aes(yend = reorder(rownames(candy), pricepercent), 
                   xend = 0), col="gray40") +
    geom_point()
```

Now that we’ve explored the dataset a little, we’ll see how the variables interact with one another. We’ll use correlation and view the results with the corrplot package to plot a correlation matrix.

```{r}
library(corrplot)
cij <- cor(candy)
corrplot(cij)
```
  
>Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

Chocolate and Fruity are the most anti-correlated.

```{r}
cij["chocolate","fruity"]
```


>Q23. Similarly, what two variables are most positively correlated?

Chocolate and winpercent would be the most positively correlated.

```{r}
cij["chocolate","winpercent"]

cij["chocolate","bar"]
```

Let’s apply PCA using the prcom() function to our candy dataset remembering to set the scale=TRUE argument.

```{r}
pca <- prcomp(candy, scale=T)
summary(pca)
```

Now we can plot our main PCA score plot of PC1 vs PC2.

```{r}
plot(pca$x[,1:2])
```

We can change the plotting character and add some color:

```{r}
plot(pca$x[,1:2], col=my_cols, pch=16)
```

we make a new data.frame here that contains our PCA results with all the rest of our candy data. We will then use this for making plots below

```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
```

```{r}
p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=my_cols)
p
```

Again we can use the ggrepel package and the function ggrepel::geom_text_repel() to label up the plot with non overlapping candy names like. We will also add a title and subtitle like so:

```{r}
library(ggrepel)

p + geom_text_repel(size=3.3, col=my_cols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538")
```

more candy labels you can change the max.overlaps value to allow more overlapping labels or pass the ggplot object p to plotly like so to generate an interactive plot that you can mouse over to see labels:

```{r}
library(plotly)
```

```{r}
ggplotly(p)
```

Let’s finish by taking a quick look at PCA our loadings.

```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```

>Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

Fruity, hard, and pluribus were the variables strongly picked up by Pc1 positively. These make sense because they may not be much variability within these variables.




